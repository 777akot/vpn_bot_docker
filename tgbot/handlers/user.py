from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery, ChatType, ParseMode

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from typing import Dict

from loader import bot, db, admin_ids
from tgbot.keyboards.callback_data_factory import vpn_keys_callback
from tgbot.keyboards.inline import keyboard_start, keyboard_help, keyboard_p2p_start, keyboard_keys_list, keyboard_client, permanent_keyboard

from tgbot.controllers.referal import get_referal_users
from tgbot.handlers.partner import check_partner, partner_start
from tgbot.handlers.admin import admin_start


def extract_referer_id(text):
    # Extracts referer id from the sent /start command.
    if len(text.split()) > 1:
        return text.split()[1]
    else: 
        return None
    
# async def user_start(message: Message):
#     await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å VPN\n\n',
#                          reply_markup=keyboard_start(), disable_web_page_preview=True)

async def clear_screen(message):
    i = 0
    while i <= 1 :
        await bot.delete_message(message.chat.id, message.message_id - i)
        i += 1

async def p2p_start(message: Message):

    is_admin = False


    if message.chat.id in admin_ids:
        is_admin = True
    # await clear_screen(message)
    print("START")
    referer_id = extract_referer_id(message.text)
    ref = referer_id
    if referer_id is not None:
        # await message.answer('referer_id: ' + referer_id)
        print(f'referer_id: {referer_id}')
        ref = int(referer_id)
    try:
        await db.add_user(message.chat.id, message.chat.first_name, ref)
        # try:
        #     for x in admin_ids:
        #         users = await db.show_users()
        #         bot.send_message(chat_id=x, text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.first_name} –í—Å–µ–≥–æ —Ç–µ–ø–µ—Ä—å: {len(users)}")
        # except Exception as e:
        #     print(f"ERROR: P2P START: {e}")
    except Exception as e:
        print(f'error: {e}')
        pass
    finally:
        def get_nbsp(count):
            return "\u00A0" * count
            

        await bot.send_message(chat_id=message.chat.id,text=f"–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! \n\n",reply_markup=permanent_keyboard(is_admin))
        await message.answer(
                             f'<b>üïπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é </b>\n\n'
                             f'–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ —Ç–æ—Ä–º–æ–∑–æ–≤ ‚Äì –ø—Ä–æ—â–µ! üåêüöÄ\n\n'
                             f'–ù–∞–∂–º–∏ "–°–∫–∞—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç" –¥–ª—è \n—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Outline.üì≤üíª\n\n'
                             f'–ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∂–∞–≤ "–î–æ—Å—Ç—É–ø –∫ VPN".üåç\n–ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì –∏—Å–ø–æ–ª—å–∑—É–π –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –î–æ—Å—Ç—É–ø.üÜì\n'
                             f'–ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á. üí∞üîë\n'
                             f'–°–∫–æ–ø–∏—Ä—É–π –∏ –≤—Å—Ç–∞–≤—å –∫–ª—é—á –≤ –∫–ª–∏–µ–Ω—Ç ‚Äì –∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π \n–¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —É —Ç–µ–±—è. üîìüåê\n\n'
                             f'–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äì –Ω–∞–∂–º–∏ "–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏". ü§ùüí¨\n'
                             f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å —É–¥–æ–±–Ω—ã–º –¥–ª—è —Ç–µ–±—è! üôåüòä\n'
                             f'<pre>{get_nbsp(70)}</pre><pre>\u00A0</pre>\n'
                             ,
                        reply_markup=keyboard_p2p_start(), disable_web_page_preview=False)


async def help_handler(message: Message):
    # await clear_screen(message)
    await message.answer(f'Outline ‚Äì —ç—Ç–æ –ü–û —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, '
                         f'–∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π '
                         f'<a href="https://s3.amazonaws.com/outline-vpn/static_downloads/ros-report.pdf">Radically Open Security</a> –∏ '
                         f'<a href="https://s3.amazonaws.com/outline-vpn/static_downloads/cure53-report.pdf">Cure53</a>.\n\n'
                         f'Outline –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ <a href="https://shadowsocks.org/">Shadowsocks</a>',
                         reply_markup=keyboard_help(), disable_web_page_preview=True)


async def help_callback_handler(callback_query: CallbackQuery):
    # await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id,
                           f'Outline ‚Äì —ç—Ç–æ –ü–û —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, '
                           f'–∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π '
                           f'<a href="https://s3.amazonaws.com/outline-vpn/static_downloads/ros-report.pdf">Radically Open Security</a> –∏ '
                           f'<a href="https://s3.amazonaws.com/outline-vpn/static_downloads/cure53-report.pdf">Cure53</a>.\n\n'
                           f'Outline –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ <a href="https://shadowsocks.org/">Shadowsocks</a>\n\n'
                           f'–°–∫–∞—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Outline —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞:\n'
                           ,
                           reply_markup=keyboard_client(), disable_web_page_preview=True)

async def show_my_keys(message: Message):
    # await clear_screen(message)
    keys = await db.get_all_keys(message.chat.id)
    if len(keys) > 0:
        await message.answer(f'<b>üóù –ú–æ–∏ –∫–ª—é—á–∏</b>\n\n'
                         f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞\n'
                         f'–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏\n\n'
                         ,
                         reply_markup=await keyboard_keys_list('showkeys',message.chat.id), disable_web_page_preview=True)
    else:
        await message.answer(f'–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á.')
    

async def show_info(message: Message):
    # await clear_screen(message)
    user_name = message.chat.first_name
    user_id = message.chat.id
    bot_info = await bot.get_me()
    ref_link = f'https://t.me/{bot_info.username}?start={user_id}'
    ref_link_view = f't.me/{bot_info.username}?start={user_id}'
    referal_users = await get_referal_users(user_id)
    paid_referal_users = 0
    if len(referal_users) > 0:
        for x in referal_users:
            if x[0] == True:
                paid_referal_users += 1
    
    await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}: \n\n'
                         f'<b>–ó–æ–≤–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–µ—Å—è—Ü –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ</b>*\n\n'
                         f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n'
                         f'<code>{ref_link}</code> \n\n'
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \n'
                         f'{len(referal_users)} –∏–∑ –Ω–∏—Ö –æ–ø–ª–∞—Ç–∏–ª–∏: {paid_referal_users}'
                         f'\n\n'
                         f'* - –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–ø–ª–∞—Ç–∏–≤—à–∏–µ –ø–æ–¥–ø–∏—Å–∫—É'
                         ,parse_mode="HTML")

async def text_process(message: Message):
    if message.text == 'üõ† –ê–¥–º–∏–Ω–∫–∞':
        await bot.delete_message(message.chat.id, message.message_id)
        if message.chat.id in admin_ids:
                    msg = message
                    msg.text = "/admin"
                    await admin_start(msg)

    if message.text == 'üïπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.delete_message(message.chat.id, message.message_id)
        msg = message
        msg.text = "/start"
        await p2p_start(msg)
    if message.text == 'üóù –ú–æ–∏ –∫–ª—é—á–∏':
        await bot.delete_message(message.chat.id, message.message_id)
        msg = message
        msg.text = "/mykeys"
        await show_my_keys(msg)

async def referals_handler(callback_query: CallbackQuery):
    print(f"\n Referals_handler \n")
    ispartner = await check_partner(callback_query.from_user.id)
    if ispartner:
        print(f"\n You are partner \n")
        msg = callback_query.message
        msg.from_user.id = callback_query.from_user.id
        msg.text = "/partner"
        await partner_start(msg)
        return
    else:
        print(f"\n You are NOT a partner \n")
        msg = callback_query.message
        msg.from_user.id = callback_query.from_user.id
        msg.text = "/info"
        await show_info(msg)
        return

def register_user(dp: Dispatcher):
    # dp.register_message_handler(user_start, commands=["start"], chat_type=ChatType.PRIVATE)
    dp.register_message_handler(p2p_start, commands=["start"], chat_type=ChatType.PRIVATE)
    dp.register_message_handler(help_handler, commands=["help"], chat_type=ChatType.PRIVATE)
    dp.register_message_handler(show_my_keys, commands=["mykeys"], chat_type=ChatType.PRIVATE)
    dp.register_callback_query_handler(help_callback_handler, lambda c: c.data == 'why', chat_type=ChatType.PRIVATE)
    dp.register_message_handler(show_info, commands=["info"], chat_type=ChatType.PRIVATE)
    dp.register_message_handler(text_process, content_types=["text"], chat_type=ChatType.PRIVATE)
    dp.register_callback_query_handler(referals_handler, lambda c: c.data == 'referals', chat_type=ChatType.PRIVATE)
    
